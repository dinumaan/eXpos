//1
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP; // UTPR = SP
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1])*16 + 12]; // SP = KPTR

//2
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = INT_EXEC;

//3
alias userSP R0;
alias fileName R1;
userSP = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
fileName = [[PTBR+2*((userSP-4)/512)]*512 + (userSP-4)%512];

//4 &5
alias present R2;
present = 0;
alias i R3;
alias Inode_Index R4;
i = 0;

while(i < MAX_FILE_NUM)do
	if([INODE_TABLE + i*16] == EXEC && [INODE_TABLE + i*16 + 1] ==fileName)then
		present = 1;
		Inode_Index = i;
		break;
	endif;
	i = i+1;
endwhile;

if(present == 0)then
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]*16) + 9] = 0;
	SP = userSP;
	[( [PTBR + 2*( ( userSP-1 )/512 )] )*512 + (userSP-1)%512] = -1;
	ireturn;
endif;

[[PTBR + 2*((userSP-1)/512)*512] + (userSP-1)%512] = 0;

//6
backup;
R1 = EXIT_PROCESS;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
restore;

//7
alias user_area_page R5;
user_area_page = [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11];

[MEMORY_FREE_LIST + user_area_page] = [MEMORY_FREE_LIST + user_area_page] + 1;
[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2] - 1;

//8
SP = user_area_page*512-1;

//9
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4] = RUNNING;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+7] = Inode_Index;

//10
PTBR = PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE+1];

//10a library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//10b 
backup;
// allocate 2 heap page
R1 = GET_FREE_PAGE;
call MOD_2;
[PTBR+4] = R0;
[PTBR+5] = "0110";

R1 = GET_FREE_PAGE;
call MOD_2;
[PTBR+6] = R0;
[PTBR+7] = "0110";

//allocate 2 stack pages
R1 = GET_FREE_PAGE;
call MOD_2;
[PTBR+16] = R0;
[PTBR+17] = "0110";

R1 = 1;
call MOD_2;
[PTBR+18] = R0;
[PTBR+19] = "0110";

restore;

//10c allocate code page 
alias inode R6;
inode = INODE_TABLE + Inode_Index*16;
[PTBR+8] = -1;
[PTBR+9] = "0000";

[PTBR+10] = -1;
[PTBR+11] = "0000";

[PTBR+12] = -1;
[PTBR+13] = "0000";

[PTBR+14] = -1;
[PTBR+15] = "0000";

alias i1 R7;
i1 = 6;
while(i1 < 10)do
	if([inode + i1] != -1)then
		backup;
		R1 = GET_FREE_PAGE;
		call MOD_2;
		[PTBR+i1+2 + (i1-6)] = R0;
		[PTBR+i+3 + (i1-6)] = "0110";
		restore;
		loadi(R0, [inode+i1]);
	endif;
	i1 = i1+1;
endwhile;
//11

//12
[[PTBR+16]*512] = [[PTBR+8]*512+1];

//13
SP = 8*512;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9] = 0;

ireturn;
