// load timer isr (module 5)
loadi(50,63);
loadi(51,64);

//load even program 
loadi(83,69);

//load INIT program
loadi(65,7);
loadi(66,8);

// load INT10 
loadi(22,35);
loadi(23,36);

// load exception handler INT10
loadi(2, 15);
loadi(3, 16);

// load common share library code
loadi(63,13);
loadi(64,14);

// load interrupt timer rutine
loadi(4, 17);
loadi(5, 18);

// load INT7 console write
loadi(16,29);
loadi(17,30);

// page table for init process
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//Process Table for init process 
[PROCESS_TABLE + 16 + 10] = 0;
[PROCESS_TABLE + 16  + 11] = 80; // Set user area page number
[PROCESS_TABLE + 16  + 1] = 1; //process table entry(PID) should be zeros as this is first process
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20; // ptbr
[PROCESS_TABLE + 16 + 15] = 10; // ptlr
[PROCESS_TABLE + 16 + 12] = 0;  // kptr
[PROCESS_TABLE + 16 + 13] =  8*512; // uptr
[PROCESS_TABLE + 16 + 4] = CREATED; // state filed
[SYSTEM_STATUS_TABLE + 1] = 1; // System Status Table for PIDS

//[76*512] = [65*512 + 1];
// page table for even process

PTBR = PAGE_TABLE_BASE+40;
PTLR = 10;
// library 
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

// code 
[PTBR+8] =  83;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

// stack 
[PTBR+16] = 84;
[PTBR+17] = "0110";
[PTBR+18] = 85;
[PTBR+19] = "0110";

// process table for even program
[PROCESS_TABLE + 32 + 11] = 86;
[PROCESS_TABLE + 32 + 1] = 2;
[PROCESS_TABLE + 32 + 14] = PAGE_TABLE_BASE + 40;
[PROCESS_TABLE + 32 + 15] = 10;
[PROCESS_TABLE + 32 + 12] = 0;
[PROCESS_TABLE + 32 + 10]=0;
[PROCESS_TABLE + 32 + 13] = 8*512;
[PROCESS_TABLE + 32 + 4] = CREATED;

// set remming entries in process table as terinated 
alias ctr R0;
ctr=3;
while(ctr<MAX_PROC_NUM)do
	[PROCESS_TABLE+ctr*16+4]=TERMINATED;
	ctr=ctr+1;
endwhile;

// set sp
[84*512] = [83*512 + 1];

[76*512] = [65*512+1];
breakpoint;
return;

