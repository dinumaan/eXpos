[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5; // set MODE FLAG filed 


// store value of of user stack pointer in rejister R0
alias userSP R0;
userSP = SP;



// context switch from user stack to kernal stack
alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];// userSp-4 is the location of argument 1 which file file discriptor
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];



// file discriptor(argument 1) for console write  is -2
if (fileDescriptor != -2)
then
	alias physicalAddrRetVal R5;
    	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512); // return value store at loction userSP-1
    	[physicalAddrRetVal] = -1;
else
	alias word R5;
	word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
	print word;
	alias physicalAddrRetVal R6;
	physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = 0;
endif;


// set back value of sp to top of user stack
SP = userSP;


// reset the MODE FLAG filed in process table to 0. Value 0 means process running in user mode
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;
