//load idle code 
loadi(69,11);
loadi(70,12);

//load INIT program
loadi(65,7);
loadi(66,8);

// load INT10 module
loadi(22,35);
loadi(23,36);

// load exception handler
loadi(2, 15);
loadi(3, 16);

// load common share library code
loadi(63,13);
loadi(64,14);

// load interrupt timer rutine
loadi(4, 17);
loadi(5, 18);

// load INT7 
loadi(16,29);
loadi(17,30);

// page table for idle process 
PTBR=PAGE_TABLE_BASE;  //as PID of idle process is 0

//Library
[PTBR+0] = -1;
[PTBR+1] = "0000";
[PTBR+2] = -1;
[PTBR+3] = "0000";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

SP = 8*512;
[81 * 512] = [69*512 + 1];

// process table for idle process 

[PROCESS_TABLE + 11] = 82; // user area page
[PROCESS_TABLE + 1] = 0;
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE; // PTBR field
[PROCESS_TABLE + 15] = 10; // PTLR filed
[PROCESS_TABLE + 12] = 0; // kptr filed
[PROCESS_TABLE + 13] = SP; // uptr filed
[PROCESS_TABLE + 4] = CREATED;
[SYSTEM_STATUS_TABLE + 1] = 0;

// page table for init process
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

SP = 8*512;
[76*512] = [65 * 512 + 1];


//Process Table for init process 

[PROCESS_TABLE + 16  + 11] = 80; // Set user area page number
[PROCESS_TABLE + 16  + 1] = 1; //process table entry(PID) should be zeros as this is first process
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16 + 15] = 10;
[PROCESS_TABLE + 16 + 12] = SP%512;
[PROCESS_TABLE + 16 + 13] = SP;
[PROCESS_TABLE + 16 + 4] = RUNNING;
[SYSTEM_STATUS_TABLE + 1] = 1; // System Status Table for PIDS


ireturn;
